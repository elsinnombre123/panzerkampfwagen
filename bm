import datetime as dt
from enum import Enum
from typing import Union, List, Dict
import pandas as pd
import numpy as np
from abc_quant_analytics.interfaces.analytics_engine_interface import AnalyticsEngine  # Assuming this is the parent class
from abc_quant_analytics.interfaces.analytics_component_interface import AnalyticsComponent
import plotly.graph_objs as go
from abc_quant_internal.tsdb import TSDB  # Assuming this works in your environment

# Parameter Enums
class Years(Enum):
    Y1 = '1y'
    Y2 = '2y'
    Y5 = '5y'
    Y10 = '10y'
    Y15 = '15y'
    Y20 = '20y'

class Cross(Enum):
    EURUSD = "wmeur"
    GBPUSD = "wmgbp"
    USDJPY = "wmjpy"
    AUDUSD = "wmaud"
    USDCAD = "wmcad"

class Period(Enum):
    M1 = '1m'
    M2 = '2m'
    M3 = '3m'
    M6 = '6m'

class MaxOverlap(Enum):
    W0 = '0'
    W1 = '1w'
    W2 = '2w'

class Direction(Enum):
    UP = 1
    DOWN = 0

# Big Moves Engine
class BigMovesEngine(AnalyticsEngine):
    def __init__(self,
                 cross: Cross,
                 years: Years,
                 period: Period,
                 num_moves: int,
                 max_overlap: MaxOverlap = MaxOverlap.W0,
                 direction: Direction = Direction.UP):

        super().__init__()
        self.cross = cross
        self.years = years
        self.period = period
        self.num_moves = num_moves
        self.max_overlap = max_overlap
        self.direction = direction
        self.data = None

    def fetch_historical_data(self):
        end = dt.date.today()
        start = end - dt.timedelta(days=int(self.years.value[:-1]) * 365)

        # Fetch historical data using TSDB
        tsdb = TSDB()
        ref_series = tsdb.get_data(self.cross.value, start=start, end=end)
        df = ref_series.to_frame(name='Spot')
        df.index.name = "Date"

        self.data = df.ffill().bfill()

    def process(self) -> pd.DataFrame:
        if self.data is None:
            self.fetch_historical_data()

        df = self.data.copy()
        period_days = {"1m": 21, "2m": 42, "3m": 63, "6m": 126}[self.period.value]
        df['Change'] = df['Spot'].pct_change(period_days)

        if self.direction == Direction.UP:
            big_moves = df.nlargest(self.num_moves, 'Change')
        else:
            big_moves = df.nsmallest(self.num_moves, 'Change')

        big_moves['StartDate'] = big_moves.index
        big_moves['EndDate'] = big_moves['StartDate'] + pd.to_timedelta(period_days, unit='D')
        return big_moves

# Big Moves Component
class BigMovesComponent(AnalyticsComponent):
    def __init__(self,
                 cross: Cross,
                 years: Years,
                 period: Period,
                 num_moves: int,
                 max_overlap: MaxOverlap = MaxOverlap.W0,
                 direction: Direction = Direction.UP):
        super().__init__()
        self.cross = cross
        self.years = years
        self.period = period
        self.num_moves = num_moves
        self.max_overlap = max_overlap
        self.direction = direction
        self.engine = BigMovesEngine(
            cross=cross,
            years=years,
            period=period,
            num_moves=num_moves,
            max_overlap=max_overlap,
            direction=direction
        )

    def get_visualization(self) -> go.Figure:
        df = self.engine.process()
        spot_data = self.engine.data.reset_index()

        # Create a plotly figure
        fig = go.Figure()

        # Plot historical spot data
        fig.add_trace(go.Scatter(x=spot_data['Date'], y=spot_data['Spot'], mode='lines', name='Spot Data',
                                 line=dict(color='blue')))

        # Highlight big moves
        for _, row in df.iterrows():
            fig.add_vrect(
                x0=row['StartDate'], x1=row['EndDate'],
                fillcolor="red", opacity=0.3, layer="below", line_width=0
            )

        # Set layout for the figure
        fig.update_layout(
            title=dict(text=f"Big Moves for {self.cross.name}", x=0.5),
            xaxis_title="Date",
            yaxis_title="Spot",
            width=1000,
            height=600,
            xaxis_showgrid=False,
            yaxis_showgrid=False
        )
        return fig

    def get_visualization_parameters(self):
        # Minimal implementation to satisfy abstract method
        return None

    @staticmethod
    def get_default_params() -> Dict[str, object]:
        return {
            'cross': Cross.EURUSD,
            'years': Years.Y5,
            'period': Period.M1,
            'num_moves': 10,
            'max_overlap': MaxOverlap.W0,
            'direction': Direction.UP
        }

    @property
    def metadata(self) -> Dict[str, str]:
        return {
            'Title': f"Big Moves Analysis for {self.cross.name}",
            'Description': "Highlighting periods of significant moves in spot data"
        }

# Instantiate and visualize
if __name__ == "__main__":
    component = BigMovesComponent(
        cross=Cross.EURUSD,
        years=Years.Y5,
        period=Period.M1,
        num_moves=10,
        max_overlap=MaxOverlap.W0,
        direction=Direction.UP
    )

    fig = component.get_visualization()
    fig.show()
