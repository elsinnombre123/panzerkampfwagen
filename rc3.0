# Imports
import abc_quant_internal.tdapi as tdapi
from abc_quant_internal.boltweb import valuation
from abc_quant.risk import MarketDataPattern, MarketDataShock, MarketDataShockType, MarketDataShockBasedScenario
from abc_quant.markets import PricingContext, HistoricalPricingContext
from abc_quant.markets.portfolio import Portfolio
from datetime import date, timedelta
from dateutil.relativedelta import relativedelta
import pandas as pd
import plotly.graph_objs as go
from typing import List, Dict, Optional
from abc_quant.datetime import business_day_offset
from abc_quant_analytics.interfaces.analytics_engine_interface import AnalyticsEngine
from abc_quant_analytics.interfaces.analytics_component_interface import AnalyticsComponent, MetaDataKeys
from abc_quant_analytics.visualization_params import VisualizationParameters

# ENGINE
class RiskConeEngine(AnalyticsEngine):
    def __init__(self, 
                 pricing_date: date, 
                 end_date: str = '1y', 
                 ccy_under: str = 'EUR', 
                 ccy_over: str = 'USD', 
                 ccy_payout: Optional[str] = None, 
                 freq: str = 'W-FRI', 
                 csa_term: str = 'USD-1', 
                 market_data_location: str = 'NYC', 
                 percentiles: List[float] = [0.95, 0.05, 0.90, 0.10], 
                 precision: int = 4, 
                 tenor: Optional[List[str]] = None):
        super().__init__()
        
        # Process pricing_date using business_day_offset
        self.pricing_date = business_day_offset(pricing_date, -1, roll='forward')
        self.end_date_label = end_date  # Store the input end_date label for annotation
        self.end_date = self.calculate_end_date(end_date, tenor)
        
        self.ccy_under = ccy_under
        self.ccy_over = ccy_over
        self.ccy_payout = ccy_payout or ccy_over
        self.freq = freq
        self.csa_term = csa_term
        self.market_data_location = market_data_location
        self.percentiles = percentiles
        self.precision = precision
        self.cross = f"{ccy_over}/{ccy_under}"
        self.date_range = self.generate_date_range()
        
        # Calculate highlight dates based on the tenor values provided
        self.highlight_dates = self.generate_highlight_dates(tenor)

    # Valid periods for tenor, end_date, and histspot_lookback
    VALID_PERIODS = {
        '3m': relativedelta(months=3),
        '6m': relativedelta(months=6),
        '9m': relativedelta(months=9),
        '1y': relativedelta(years=1),
        '2y': relativedelta(years=2)
    }

    def calculate_end_date(self, end_date: str, tenor: Optional[List[str]]) -> date:
        # Verify end_date is valid
        if end_date not in self.VALID_PERIODS:
            raise ValueError(f"Invalid end_date '{end_date}'. Allowed values: {list(self.VALID_PERIODS.keys())}")

        # Find the maximum tenor duration by checking order in VALID_PERIODS
        if tenor:
            max_tenor = sorted(tenor, key=lambda t: list(self.VALID_PERIODS.keys()).index(t))[-1]
            if list(self.VALID_PERIODS.keys()).index(end_date) < list(self.VALID_PERIODS.keys()).index(max_tenor):
                raise ValueError(f"end_date '{end_date}' must be equal to or greater than the maximum tenor '{max_tenor}'.")

        return business_day_offset(self.pricing_date + self.VALID_PERIODS[end_date], -1, roll='forward')

    @staticmethod
    def abc_color(c):
        color_dict = {
            'darkblue': 'rgb(0, 53, 95)',
            'blue': 'rgb(115, 153, 198)',
            'lightgrey': 'rgb(221, 221, 221)',
            'gold': 'rgb(255, 204, 0)',
            'darkred': 'rgb(192, 0, 0)',
            'green': 'rgb(0, 176, 80)',
            'maroon': 'rgb(139, 14, 4)',
            'pink': 'rgb(181, 125, 181)',
            'orange': 'rgb(255, 165, 0)',
            'cyan': 'rgb(0, 255, 255)'
        }
        return color_dict.get(c, 'rgb(0, 0, 0)')
    
    def generate_date_range(self):
        date_range = pd.bdate_range(self.pricing_date, self.end_date, freq=self.freq).date.tolist()
        
        if date_range[0] == self.pricing_date:
            date_range = date_range[1:]
        
        if date_range[-1] != self.end_date:
            date_range.append(self.end_date)

        return date_range

    def generate_highlight_dates(self, tenor: Optional[List[str]]) -> Dict[str, date]:
        highlight_dates = {}
        
        # Process each tenor to create a date offset
        if tenor:
            for t in tenor:
                months = self.VALID_PERIODS[t]
                highlight_date = business_day_offset(self.pricing_date + months, -1, roll='forward')
                highlight_dates[t] = highlight_date

        # Automatically include end_date with the input label as the final highlight date
        highlight_dates[self.end_date_label] = self.end_date
        return highlight_dates

    def calculate_spot(self):
        fwd = tdapi.FXForwardBuilder(over=self.ccy_over, under=self.ccy_under, expirysettledate='0b')
        with PricingContext(pricing_date=self.pricing_date, csa_term=self.csa_term, market_data_location=self.market_data_location):
            fwd.resolve(in_place=True)
        return fwd.strike

    def historical_spot(self, start_date, end_date):
        start_date = business_day_offset(start_date, 0, roll='forward')
        end_date = business_day_offset(end_date, 0, roll='forward')
        
        fwd = tdapi.FXForwardBuilder(over=self.ccy_over, under=self.ccy_under, expirysettledate='0b')
        with HistoricalPricingContext(start=start_date, end=end_date, csa_term=self.csa_term, market_data_location=self.market_data_location):
            fwd.resolve(in_place=False)
            risks = fwd.calc(valuation('FXSpot'))
        
        return pd.DataFrame(risks.result(), columns=['Historical Spot'], index=pd.bdate_range(start=start_date, end=end_date).date.tolist())

    def risk_cone(self) -> pd.DataFrame:
        spot_current = self.calculate_spot()
        binaries = Portfolio([Portfolio([tdapi.FXBinaryBuilder(
            over=self.ccy_over, under=self.ccy_under, payoutunit=self.ccy_payout,
            expiry=t, strike='p={}'.format(p if p <= 0.50 else 1-p),
            optiontype='Put' if p <= 0.50 else 'Call', premiumsettledate='0b', premium=0) for p in self.percentiles]) 
            for t in self.date_range])

        forwards = Portfolio([tdapi.FXForwardBuilder(over=self.ccy_over, under=self.ccy_under, expirysettledate=t) for t in self.date_range])

        with PricingContext(pricing_date=self.pricing_date, csa_term=self.csa_term, market_data_location=self.market_data_location):
            binaries.resolve(in_place=True)
            forwards.resolve(in_place=True)

        labels = [f"{int(100 * p)}th Percentile" for p in self.percentiles]
        df = pd.DataFrame([(i.strike for i in p.priceables) for p in binaries.priceables], columns=labels, index=self.date_range)
        df['Forward Curve'] = [i.strike for i in forwards.priceables]
        df['Current Spot'] = [spot_current for _ in df.index]

        df = pd.concat([pd.DataFrame({x: spot_current for x in df.columns}, index=[self.pricing_date]), df], axis=0)
        df.sort_index(inplace=True)
        return df.round(self.precision)

    def process(self) -> pd.DataFrame:
        return self.risk_cone()

# COMPONENT
class RiskConeComponent(AnalyticsComponent):
    def __init__(self, 
                 pricing_date: Optional[date] = None, 
                 end_date: str = '1y', 
                 ccy_under: str = 'EUR', 
                 ccy_over: str = 'USD', 
                 ccy_payout: Optional[str] = None, 
                 freq: str = 'W-FRI', 
                 csa_term: str = 'USD-1', 
                 market_data_location: str = 'NYC', 
                 percentiles: List[float] = [0.95, 0.05, 0.90, 0.10], 
                 precision: int = 4, 
                 tenor: Optional[List[str]] = None, 
                 show_histspot: bool = True, 
                 histspot_lookback: str = '1y',  # New parameter for historical lookback period
                 percentile_colors: List[str] = None):
        super().__init__()
        
        # Initialize RiskConeEngine internally with given parameters
        self.engine = RiskConeEngine(
            pricing_date=pricing_date or date.today(),
            end_date=end_date,
            ccy_under=ccy_under,
            ccy_over=ccy_over,
            ccy_payout=ccy_payout,
            freq=freq,
            csa_term=csa_term,
            market_data_location=market_data_location,
            percentiles=percentiles,
            precision=precision,
            tenor=tenor
        )
        
        self.highlight_dates = self.engine.highlight_dates
        self.show_histspot = show_histspot
        self.histspot_lookback = histspot_lookback  # Store the histspot_lookback
        self.percentiles = percentiles
        self.percentile_colors = percentile_colors or ['#FF0000', '#00FF00', '#FFA500', '#00FFFF']
        
        while len(self.percentile_colors) < len(self.percentiles):
            self.percentile_colors.extend(['#FF0000', '#00FF00', '#FFA500', '#00FFFF'])

        # Validate histspot_lookback against the allowed values
        if self.histspot_lookback not in RiskConeEngine.VALID_PERIODS:
            raise ValueError(f"Invalid histspot_lookback '{self.histspot_lookback}'. Allowed values: {list(RiskConeEngine.VALID_PERIODS.keys())}")

    def get_visualization(self) -> go.Figure:
        df = self.engine.process()
    
        # Calculate the start date for the historical spot based on histspot_lookback
        hist_start_date = self.engine.pricing_date - RiskConeEngine.VALID_PERIODS[self.histspot_lookback]
        hist_spot_df = self.engine.historical_spot(hist_start_date, self.engine.pricing_date) if self.show_histspot else None

        fig = go.Figure()

        # Plot historical spot data
        if self.show_histspot and hist_spot_df is not None:
            fig.add_trace(go.Scatter(x=hist_spot_df.index, y=hist_spot_df['Historical Spot'], mode='lines', 
                                     name='Historical Spot', line=dict(color=self.engine.abc_color('blue'))))

        # Plot forward curve
        fig.add_trace(go.Scatter(x=df.index, y=df['Forward Curve'], mode='lines', name='Forward Curve',
                                 line=dict(color=self.engine.abc_color('darkblue'))))
        fig.add_annotation(x=df.index[-1] + timedelta(days=25),
                           y=df['Forward Curve'].iloc[-1],
                           text=f'{df["Forward Curve"].iloc[-1]:.4f}',
                           showarrow=False, arrowhead=2, ax=0)
        
        # Plot risk cone percentiles and add annotations for each percentile's final value
        for percentile, color in zip(self.percentiles, self.percentile_colors[:len(self.percentiles)]):
            col = f"{int(percentile * 100)}th Percentile"
            fig.add_trace(go.Scatter(x=df.index, y=df[col], mode='lines', name=col,
                                     line=dict(color=color, dash='dash')))
            
            # Annotation for the final percentile value
            fig.add_annotation(
                x=df.index[-1] + timedelta(days=25), 
                y=df[col].iloc[-1],
                text=f'{df[col].iloc[-1]:.4f}', 
                showarrow=False, arrowhead=2, ax=-30)

        # Highlight specific dates
        for label, dh in self.highlight_dates.items():
            fig.add_vline(x=dh, line=dict(color='grey', dash='dash'))
            fig.add_annotation(x=dh, y=df['Forward Curve'].max() * 1.15, text=label,
                               showarrow=False, xshift=-15, yshift=10)

        # Set layout for the figure
        fig.update_layout(
            title=dict(text=f"Risk Cone for {self.engine.ccy_over}/{self.engine.ccy_under}", x=0.5),
            xaxis_title="Date",
            yaxis_title="Spot",
            legend=dict(yanchor="top", xanchor="center", x=0.5, y=-0.15, orientation='h'),
            yaxis_range=[df.min().min() * 0.95, df.max().max() * 1.05],
            width=1000,
            height=600,
            xaxis_showgrid=False,  # Disable x-axis gridlines
            yaxis_showgrid=False   # Disable y-axis gridlines
        )
        return fig

    @staticmethod
    def get_default_params() -> Dict[str, object]:
        return {'cross': 'EURUSD'}

    def get_visualization_parameters(self) -> VisualizationParameters:
        return VisualizationParameters(show_legend=True, precision=2)

    @property
    def metadata(self) -> Dict[str, str]:
        return {MetaDataKeys.Title: f"Risk Cone for {self.engine.ccy_under}{self.engine.ccy_over}"}

# Example usage
component = RiskConeComponent(
    pricing_date=date.today(),
    tenor=['3m', '6m'],
    end_date='1y',
    histspot_lookback='1y',  # Specify historical lookback
    ccy_under='EUR',
    ccy_over='USD',
    show_histspot=True,
    percentiles=[0.95, 0.05, 0.90, 0.10],
    percentile_colors=['#FF0000', '#00FF00', '#FFA500', '#00FFFF']
)
fig = component.get_visualization()
fig.show()