from typing import Dict, Union, List
import pandas as pd
from datetime import datetime, date
from gs_quant.datetime.relative_date import RelativeDate
from gs_quant.datetime.date import business_day_offset
from gs_quant_analytics.interfaces.analytics_component_interface import AnalyticsComponent, MetaDataKeys
from gs_quant_analytics.dataviz.plotly.plotlyviz import PlotlyViz
from gs_quant_analytics.dataviz.figures.go_table import GoTable
from gs_quant_analytics.visualization_params import VisualizationParameters


class RiskConeTableComponent(AnalyticsComponent):
    def __init__(
        self,
        pricing_date: Union[datetime, RelativeDate] = None,
        end_date: str = "1y",
        ccy_under: str = "EUR",
        ccy_over: str = "USD",
        ccy_payout: str = None,
        freq: str = "W-FRI",
        csa_term: str = "USD-1",
        market_data_location: str = "NYC",
        percentiles: PERCENTILES = PERCENTILES.NINETY_FIVE,
        precision: int = 4,
        tenor: List[TENOR] = [TENOR.SIX_MONTHS, TENOR.NINE_MONTHS, TENOR.ONE_YEAR],
    ):
        super().__init__()
        self.pricing_date = (
            business_day_offset(pricing_date.apply_rule(), 0, roll="forward")
            if isinstance(pricing_date, RelativeDate)
            else pricing_date or date.today()
        )
        self.end_date = end_date
        self.ccy_under = ccy_under
        self.ccy_over = ccy_over
        self.ccy_payout = ccy_payout or ccy_over
        self.freq = freq
        self.csa_term = csa_term
        self.market_data_location = market_data_location
        self.percentiles = percentiles
        self.precision = precision
        self.tenor = tenor
        self.engine = RiskConeEngine(
            pricing_date=self.pricing_date,
            end_date=self.end_date,
            ccy_under=self.ccy_under,
            ccy_over=self.ccy_over,
            ccy_payout=self.ccy_payout,
            freq=self.freq,
            csa_term=self.csa_term,
            market_data_location=self.market_data_location,
            percentiles=self.percentiles,
            precision=self.precision,
            tenor=self.tenor,
        )

    def process_data(self) -> pd.DataFrame:
        # Retrieve the dataframe from the engine
        df = self.engine.process()

        # Define labels for the rows
        highlight_dates = [df.index[0]]  # "Today" corresponds to the first date
        highlight_labels = ["Today"]

        # Approximate missing tenor dates to the nearest available date in df
        for t in self.tenor:
            highlight_date = self.engine.highlight_dates.get(t.value)
            if highlight_date:
                # Find the closest available date in the dataframe
                closest_date = min(df.index, key=lambda x: abs((x - highlight_date).days))
                highlight_dates.append(closest_date)
                highlight_labels.append(t.value)

        # Prepare rows for the table
        rows = []
        for date, label in zip(highlight_dates, highlight_labels):
            rows.append({
                "Date": date,
                "Label": label,
                "Current Spot": df.loc[date, "Current Spot"],
                "Forward Curve": df.loc[date, "Forward Curve"],
                f"{int(self.percentiles.value[0] * 100)}th Percentile": df.loc[date, f"{int(self.percentiles.value[0] * 100)}th Percentile"],
                f"{int(self.percentiles.value[1] * 100)}th Percentile": df.loc[date, f"{int(self.percentiles.value[1] * 100)}th Percentile"],
            })

        # Convert rows into a DataFrame
        return pd.DataFrame(rows).round(self.precision)

    def get_visualization(self) -> PlotlyViz:
        # Process the data into a table format
        df = self.process_data()

        # Ensure the DataFrame is non-empty and structured properly
        if df.empty:
            raise ValueError("The processed DataFrame is empty and cannot be visualized.")

        # Prepare header and cells for GoTable
        table_header = {
            "values": list(df.columns),
            "align": "center",
            "fill_color": "lightgrey",
            "font": {"size": 12, "color": "black"},
        }
        table_cells = {
            "values": [df[col].tolist() for col in df.columns],
            "align": "center",
            "fill_color": "white",
            "font": {"size": 11, "color": "black"},
        }

        # Create and return a Plotly table
        viz = PlotlyViz()
        table = GoTable(header=table_header, cells=table_cells)
        viz.add_trace(table)
        return viz

    @staticmethod
    def get_default_params() -> Dict[str, object]:
        return {
            "pricing_date": RelativeDate("0b"),
            "end_date": "1y",
            "ccy_under": "EUR",
            "ccy_over": "USD",
            "ccy_payout": "USD",
            "freq": "W-FRI",
            "csa_term": "USD-1",
            "market_data_location": "NYC",
            "percentiles": PERCENTILES.NINETY_FIVE,
            "precision": 4,
            "tenor": [TENOR.SIX_MONTHS, TENOR.NINE_MONTHS, TENOR.ONE_YEAR],
        }

    @staticmethod
    def get_visualization_parameters() -> VisualizationParameters:
        return VisualizationParameters(precision=4)

    @property
    def metadata(self) -> Dict[str, str]:
        return {
            MetaDataKeys.TITLE: "Risk Cone Table",
        }


# Instantiation Example
from gs_quant.session import GsSession
import datetime
GsSession.use()

component = RiskConeTableComponent(
    pricing_date=datetime.date.today(),
    end_date="1y",
    ccy_under="EUR",
    ccy_over="USD",
    ccy_payout="USD",
    freq="W-FRI",
    csa_term="USD-1",
    market_data_location="NYC",
    percentiles=PERCENTILES.NINETY_FIVE,
    precision=4,
    tenor=[TENOR.SIX_MONTHS, TENOR.NINE_MONTHS, TENOR.ONE_YEAR],
)
component.show()
