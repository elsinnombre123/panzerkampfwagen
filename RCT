from typing import Dict, Union, List
import datetime
from datetime import timedelta, date
import pandas as pd
from gs_quant_analytics.dataviz.plotly.plotlyviz import PlotlyViz
from gs_quant_analytics.dataviz.figures.go_table import GoTable
from gs_quant.datetime.relative_date import RelativeDate
from gs_quant_analytics.interfaces.analytics_component_interface import (
    AnalyticsComponent,
    MetaDataKeys,
)
from gs_quant_analytics.visualization_params import VisualizationParameters
from gs_quant_internal.tdapi import tdapi
from gs_quant.datetime import business_day_offset

class RiskConeTableComponent(AnalyticsComponent):
    def __init__(
        self,
        pricing_date: Union[datetime.date, RelativeDate] = None,
        end_date: str = "1y",
        ccy_under: str = "EUR",
        ccy_over: str = "USD",
        ccy_payout: str = None,
        freq: str = "W-FRI",
        csa_term: str = "USD-1",
        market_data_location: str = "NYC",
        percentiles: PercentilesParam = PercentilesParam.NINETY_FIVE,
        precision: int = 4,
        tenor: List[TENOR] = [TENOR.SIX_MONTHS, TENOR.NINE_MONTHS, TENOR.ONE_YEAR],
    ):
        """
        Table visualization component for the Risk Cone data.
        """
        super().__init__()
        self.pricing_date = pricing_date or self.get_default_params()["pricing_date"]
        self.end_date = end_date
        self.ccy_under = ccy_under
        self.ccy_over = ccy_over
        self.ccy_payout = ccy_payout or ccy_over
        self.freq = freq
        self.csa_term = csa_term
        self.market_data_location = market_data_location
        self.percentiles = percentiles
        self.precision = precision
        self.tenor = tenor
        self.engine = RiskConeEngine(
            pricing_date=self.pricing_date,
            end_date=self.end_date,
            ccy_under=self.ccy_under,
            ccy_over=self.ccy_over,
            ccy_payout=self.ccy_payout,
            freq=self.freq,
            csa_term=self.csa_term,
            market_data_location=self.market_data_location,
            percentiles=PERCENTILES[self.percentiles.name],
            precision=self.precision,
            tenor=self.tenor,
        )

    def process_data(self) -> pd.DataFrame:
        """
        Process the data to include only rows for the specified tenors.
        """
        engine_df = self.engine.process()
        highlight_dates = []
        highlight_labels = []

        # Ensure tenor highlights are valid
        if self.tenor:
            for t in self.tenor:
                # Compute the expected date for the tenor
                highlight_date = self.engine.pricing_date + VALID_PERIODS[t.value]
                # Find the closest available date in the DataFrame
                closest_date = min(
                    engine_df.index, key=lambda x: abs(pd.Timestamp(x) - highlight_date)
                )
                highlight_dates.append(closest_date)
                highlight_labels.append(t.value)

        # Filter the DataFrame to include only the rows for highlight dates
        filtered_data = engine_df.loc[highlight_dates].copy()
        filtered_data.insert(0, "Label", highlight_labels)
        filtered_data.insert(0, "Date", highlight_dates)

        return filtered_data

    def get_visualization(self) -> PlotlyViz:
        """
        Return the table visualization using PlotlyViz.
        """
        viz = PlotlyViz()
        df = self.process_data()

        table = GoTable(
            data=df,
            header=["Date", "Label", "Current Spot", "Forward Curve", "95th Percentile", "5th Percentile"],
        )
        viz.add_trace(table)
        return viz

    @staticmethod
    def get_default_params() -> Dict[str, object]:
        """
        Default parameters for the component.
        """
        return {
            "pricing_date": datetime.date.today(),
            "percentiles": PercentilesParam.NINETY_FIVE,
            "precision": 4,
        }

    @staticmethod
    def get_visualization_parameters() -> VisualizationParameters:
        """
        Visualization parameters for the component.
        """
        return VisualizationParameters(precision=4)

    @property
    def metadata(self):
        """
        Metadata for the component.
        """
        title = "Risk Cone Table"
        return {MetaDataKeys.TITLE: title}

# Initialization Example
from gs_quant.session import GsSession
import datetime

GsSession.use()

component = RiskConeTableComponent(
    pricing_date=datetime.date.today(),
    end_date="1y",
    ccy_under="EUR",
    ccy_over="USD",
    ccy_payout="USD",
    freq="W-FRI",
    csa_term="USD-1",
    market_data_location="NYC",
    percentiles=PercentilesParam.NINETY_FIVE,
    precision=4,
    tenor=[TENOR.SIX_MONTHS, TENOR.NINE_MONTHS, TENOR.ONE_YEAR],
)
component.show()
