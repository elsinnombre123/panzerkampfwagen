import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Load the CSV data
data = pd.read_csv("your_file.csv", parse_dates=["date"])

# Define the default start and end dates for the dataset
start_date_df = "1953-01-01"  # Default start date
end_date_df = "2024-10-28"  # Default end date
data = data[(data['date'] >= start_date_df) & (data['date'] <= end_date_df)]

# Define the start month and lookahead period
start_month = "November"  # You can change to "January", etc.
lookahead_days = 42  # Number of trading days to look ahead

# Define Republican and Democrat election years
republican_election_years = [1952, 1956, 1968, 1972, 1980, 1984, 1988, 2000, 2004, 2016]
democrat_election_years = [1960, 1964, 1976, 1992, 1996, 2008, 2012, 2020]

# Define a specific year to plot individually
s_year = 2024  # Example year

# Filter the start date based on input
start_month_date = datetime.strptime(f"01 {start_month}", "%d %B")

# Prepare a dictionary to store data
indexed_performances = {'all': [], 'republican': [], 'democrat': []}

# Process each year individually
for year in data['date'].dt.year.unique():
    # Filter data for the current year and the following year to allow lookahead to span across years
    year_data = data[(data['date'].dt.year == year) | (data['date'].dt.year == year + 1)]
    year_data = year_data.sort_values('date')

    # Filter data from the first occurrence of the defined start month in the current year
    year_start_data = year_data[(year_data['date'].dt.year == year) & (year_data['date'].dt.month >= start_month_date.month)]
    if len(year_start_data) == 0:
        continue
    
    # Get the first available date in the specified start month
    first_date = year_start_data['date'].iloc[0]
    year_data = year_data[year_data['date'] >= first_date]
    year_data = year_data.head(lookahead_days)  # Take only the lookahead period

    # Normalize the prices to start at 100
    initial_price = year_data['spx'].iloc[0]
    year_data['indexed_spx'] = (year_data['spx'] / initial_price) * 100

    # Add to the appropriate list
    indexed_performances['all'].append(year_data['indexed_spx'].values)
    if year in republican_election_years:
        indexed_performances['republican'].append(year_data['indexed_spx'].values)
    elif year in democrat_election_years:
        indexed_performances['democrat'].append(year_data['indexed_spx'].values)

# Calculate average for each group
all_avg = pd.DataFrame(indexed_performances['all']).mean()
rep_avg = pd.DataFrame(indexed_performances['republican']).mean()
dem_avg = pd.DataFrame(indexed_performances['democrat']).mean()

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(all_avg.values, label="Overall Average")
plt.plot(rep_avg.values, label="Republican Average (Election Year)")
plt.plot(dem_avg.values, label="Democrat Average (Election Year)")

# Additional plot for the specific year `s_year`
specific_year_data = data[(data['date'].dt.year == s_year) | (data['date'].dt.year == s_year + 1)]
specific_year_data = specific_year_data.sort_values('date')

specific_year_start = specific_year_data[(specific_year_data['date'].dt.year == s_year) & (specific_year_data['date'].dt.month >= start_month_date.month)]
if len(specific_year_start) > 0:
    first_date_specific = specific_year_start['date'].iloc[0]
    specific_year_data = specific_year_data[specific_year_data['date'] >= first_date_specific]
    specific_year_data = specific_year_data.head(lookahead_days)

    # Normalize to start at 100
    initial_price_specific = specific_year_data['spx'].iloc[0]
    specific_year_data['indexed_spx'] = (specific_year_data['spx'] / initial_price_specific) * 100

    # Plot the specific year line
    plt.plot(specific_year_data['indexed_spx'].values, label=f"Year {s_year}")

# Finalize and show plot
plt.xlabel("Trading Days from Start Date")
plt.ylabel("Indexed Performance (Starting at 100)")
plt.title(f"Average Performance from {start_month} (Over {lookahead_days} Trading Days)")
plt.legend()
plt.show()