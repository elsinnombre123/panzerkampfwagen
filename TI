import pandas as pd
import numpy as np

# 1. RSI
def rsi_signal(df, asset, window=14, overbought=70, oversold=30):
    delta = df[asset].diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)

    avg_gain = gain.rolling(window=window).mean()
    avg_loss = loss.rolling(window=window).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))

    latest_rsi = rsi.iloc[-1]

    if latest_rsi > overbought:
        return "-"
    elif latest_rsi < oversold:
        return "+"
    else:
        return "n"

# 2. Stochastic Oscillator
def stochastic_signal(df, asset, k_window=14, d_window=3, overbought=80, oversold=20):
    low_min = df[asset].rolling(window=k_window).min()
    high_max = df[asset].rolling(window=k_window).max()
    k = 100 * (df[asset] - low_min) / (high_max - low_min)
    d = k.rolling(window=d_window).mean()

    latest_k = k.iloc[-1]
    latest_d = d.iloc[-1]

    if latest_k > overbought and latest_k < latest_d:
        return "-"
    elif latest_k < oversold and latest_k > latest_d:
        return "+"
    else:
        return "n"

# 3. Moving Average Crossover
def ma_crossover_signal(df, asset, short_window=50, long_window=200):
    short_ma = df[asset].rolling(window=short_window).mean()
    long_ma = df[asset].rolling(window=long_window).mean()

    if short_ma.iloc[-1] > long_ma.iloc[-1]:
        return "+"
    elif short_ma.iloc[-1] < long_ma.iloc[-1]:
        return "-"
    else:
        return "n"

# 4. MACD
def macd_signal(df, asset, short_ema=12, long_ema=26, signal_ema=9):
    ema_short = df[asset].ewm(span=short_ema, adjust=False).mean()
    ema_long = df[asset].ewm(span=long_ema, adjust=False).mean()
    macd = ema_short - ema_long
    signal = macd.ewm(span=signal_ema, adjust=False).mean()

    if macd.iloc[-1] > signal.iloc[-1]:
        return "+"
    elif macd.iloc[-1] < signal.iloc[-1]:
        return "-"
    else:
        return "n"

# 5. Bollinger Bands
def bollinger_signal(df, asset, window=20, num_std=2):
    sma = df[asset].rolling(window).mean()
    std = df[asset].rolling(window).std()
    upper = sma + num_std * std
    lower = sma - num_std * std

    price = df[asset].iloc[-1]

    if price > upper.iloc[-1]:
        return "-"
    elif price < lower.iloc[-1]:
        return "+"
    else:
        return "n"

# 6. ADX (+DI/-DI)
def adx_signal(df, asset, window=14, threshold=25):
    high = df[asset]
    low = df[asset]
    close = df[asset]

    plus_dm = high.diff()
    minus_dm = low.diff()

    plus_dm[plus_dm < 0] = 0
    minus_dm[minus_dm > 0] = 0
    minus_dm = abs(minus_dm)

    tr = pd.concat([
        high - low,
        abs(high - close.shift()),
        abs(low - close.shift())
    ], axis=1).max(axis=1)

    atr = tr.rolling(window).mean()

    plus_di = 100 * (plus_dm.rolling(window).mean() / atr)
    minus_di = 100 * (minus_dm.rolling(window).mean() / atr)

    dx = 100 * abs(plus_di - minus_di) / (plus_di + minus_di)
    adx = dx.rolling(window).mean()

    if adx.iloc[-1] > threshold:
        if plus_di.iloc[-1] > minus_di.iloc[-1]:
            return "+"
        else:
            return "-"
    else:
        return "n"

# 7. Ichimoku Cloud
def ichimoku_signal(df, asset, tenkan_period=9, kijun_period=26, senkou_span_b_period=52):
    high = df[asset].rolling(window=tenkan_period).max()
    low = df[asset].rolling(window=tenkan_period).min()
    tenkan_sen = (high + low) / 2

    high_kijun = df[asset].rolling(window=kijun_period).max()
    low_kijun = df[asset].rolling(window=kijun_period).min()
    kijun_sen = (high_kijun + low_kijun) / 2

    senkou_span_a = ((tenkan_sen + kijun_sen) / 2).shift(kijun_period)
    high_senkou_b = df[asset].rolling(window=senkou_span_b_period).max()
    low_senkou_b = df[asset].rolling(window=senkou_span_b_period).min()
    senkou_span_b = ((high_senkou_b + low_senkou_b) / 2).shift(kijun_period)

    price = df[asset].iloc[-1]
    span_a = senkou_span_a.iloc[-1]
    span_b = senkou_span_b.iloc[-1]

    if price > max(span_a, span_b):
        return "+"
    elif price < min(span_a, span_b):
        return "-"
    else:
        return "n"

# 8. Parabolic SAR â€“ simplified proxy using EMA trend
def parabolic_sar_signal(df, asset, span=5):
    ema = df[asset].ewm(span=span).mean()
    if df[asset].iloc[-1] > ema.iloc[-1]:
        return "+"
    elif df[asset].iloc[-1] < ema.iloc[-1]:
        return "-"
    else:
        return "n"

# 9. CCI
def cci_signal(df, asset, window=20, upper=100, lower=-100):
    tp = df[asset]
    sma = tp.rolling(window).mean()
    mad = tp.rolling(window).apply(lambda x: np.mean(np.abs(x - x.mean())))
    cci = (tp - sma) / (0.015 * mad)

    if cci.iloc[-1] > upper:
        return "+"
    elif cci.iloc[-1] < lower:
        return "-"
    else:
        return "n"

# 10. Donchian Channel
def donchian_signal(df, asset, window=20):
    upper = df[asset].rolling(window).max()
    lower = df[asset].rolling(window).min()
    price = df[asset].iloc[-1]

    if price >= upper.iloc[-2]:
        return "+"
    elif price <= lower.iloc[-2]:
        return "-"
    else:
        return "n"

# Wrapper function to apply all indicators
def generate_technical_signals(df):
    signal_functions = {
        "RSI": rsi_signal,
        "Stochastic": stochastic_signal,
        "MA_Crossover": ma_crossover_signal,
        "MACD": macd_signal,
        "Bollinger": bollinger_signal,
        "ADX": adx_signal,
        "Ichimoku": ichimoku_signal,
        "Parabolic_SAR": parabolic_sar_signal,
        "CCI": cci_signal,
        "Donchian": donchian_signal
    }

    results = pd.DataFrame(index=df.columns, columns=signal_functions.keys())

    for asset in df.columns:
        for indicator_name, func in signal_functions.items():
            try:
                results.loc[asset, indicator_name] = func(df, asset)
            except Exception:
                results.loc[asset, indicator_name] = "n"  # fallback in case of error

    return results

# Styling the results
def display_colored_signals(signals_df):
    def color_code(val):
        if val == "+":
            return 'color: green; font-weight: bold'
        elif val == "-":
            return 'color: red; font-weight: bold'
        else:
            return ''

    styled_df = signals_df.style.applymap(color_code)
    return styled_df

signals = generate_technical_signals(your_dataframe)
display_colored_signals(signals)
