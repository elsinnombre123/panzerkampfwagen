# Imports
from datetime import date
from dateutil.relativedelta import relativedelta
import pandas as pd
import plotly.graph_objs as go
from typing import List, Union, Dict
import abc_quant_internal.tdapi as tdapi
from abc_quant.risk import MarketDataPattern, MarketDataShock, MarketDataShockType, MarketDataShockBasedScenario
from abc_quant.markets import PricingContext
from abc_quant.markets.portfolio import Portfolio
from abc_quant.datetime import business_day_offset
from abc_quant_analytics.interfaces.analytics_engine_interface import AnalyticsEngine
from abc_quant_analytics.interfaces.analytics_component_interface import AnalyticsComponent, MetaDataKeys
from abc_quant_analytics.visualization_params import VisualizationParameters

# Color Dictionary
def abc_color(c):
    color_dict = {
        'darkblue': 'rgb(0, 53, 95)',
        'blue': 'rgb(115, 153, 198)',
        'lightgrey': 'rgb(221, 221, 221)',
        'gold': 'rgb(255, 204, 0)',
        'darkred': 'rgb(192, 0, 0)',
        'green': 'rgb(0, 176, 80)',
        'maroon': 'rgb(139, 14, 4)',
        'pink': 'rgb(181, 125, 181)',
        'orange': 'rgb(255, 165, 0)',
        'cyan': 'rgb(0, 255, 255)'
    }
    return color_dict[c]

# ENGINE
class RiskConeEngine(AnalyticsEngine):
    def __init__(self, 
                 pricing_date: date, 
                 end_date: date, 
                 ccy_under: str, 
                 ccy_over: str, 
                 ccy_payout: str = None, 
                 freq: str = 'W-FRI',
                 csa_term: str = 'USD-1', 
                 market_data_location: str = 'NYC', 
                 percentiles: List[float] = [0.95, 0.05, 0.90, 0.10],
                 precision: int = 4):
        super().__init__()
        self.pricing_date = pricing_date
        self.end_date = end_date
        self.ccy_under = ccy_under
        self.ccy_over = ccy_over
        self.ccy_payout = ccy_payout or ccy_over
        self.freq = freq
        self.csa_term = csa_term
        self.market_data_location = market_data_location
        self.percentiles = percentiles
        self.precision = precision

    def calculate_spot(self):
        fwd = tdapi.FXForwardBuilder(over=self.ccy_over, under=self.ccy_under, expirysettledate='0b')
        with PricingContext(pricing_date=self.pricing_date, csa_term=self.csa_term, market_data_location=self.market_data_location):
            fwd.resolve(in_place=True)
        return fwd.strike

    def risk_cone(self) -> pd.DataFrame:
        spot_current = self.calculate_spot()
        date_range = pd.bdate_range(self.pricing_date, self.end_date, freq=self.freq).date.tolist()
        if date_range[0] == self.pricing_date:
            date_range = date_range[1:]
        if date_range[-1] != self.end_date:
            date_range.append(self.end_date)

        binaries = Portfolio([
            Portfolio([tdapi.FXBinaryBuilder(
                over=self.ccy_over, under=self.ccy_under, payoutunit=self.ccy_payout,
                expiry=t, strike='p={}'.format(p if p <= 0.50 else 1-p),
                optiontype='Put' if p <= 0.50 else 'Call', premiumsettledate='0b', premium=0) 
                for p in self.percentiles]) 
            for t in date_range])

        forwards = Portfolio([tdapi.FXForwardBuilder(over=self.ccy_over, under=self.ccy_under, expirysettledate=t) for t in date_range])

        with PricingContext(pricing_date=self.pricing_date, csa_term=self.csa_term, market_data_location=self.market_data_location):
            binaries.resolve(in_place=True)
            forwards.resolve(in_place=True)

        labels = [f'{int(100 * p)}th Percentile' for p in self.percentiles]
        df = pd.DataFrame([(i.strike for i in p.priceables) for p in binaries.priceables], columns=labels, index=date_range)
        df['Forward Curve'] = [i.strike for i in forwards.priceables]
        df['Current Spot'] = [spot_current for x in df.index]

        df = pd.concat([pd.DataFrame({col: spot_current for col in df.columns}, index=[self.pricing_date]), df], axis=0)
        df.sort_index(inplace=True)
        return df.round(self.precision)


# COMPONENT
class RiskConeComponent(AnalyticsComponent):
    def __init__(self, engine: RiskConeEngine, highlight_dates: Dict[str, date] = None):
        super().__init__()
        self.engine = engine
        self.highlight_dates = highlight_dates or {}

    def get_visualization(self) -> go.Figure:
        df = self.engine.risk_cone()
        fig = go.Figure()

        # Plot forward curve
        fig.add_trace(go.Scatter(x=df.index, y=df['Forward Curve'], mode='lines', name='Forward Curve',
                                 line=dict(color=abc_color('darkblue'))))

        # Plot percentiles
        colors = ['#FF0000', '#00FF00', '#FFA500', '#00FFFF']
        for i, col in enumerate(df.columns[:-2]):  # excluding 'Forward Curve' and 'Current Spot'
            fig.add_trace(go.Scatter(x=df.index, y=df[col], mode='lines', name=col,
                                     line=dict(color=colors[i % len(colors)], dash='dash')))

        # Add vertical lines for highlights
        for label, dh in self.highlight_dates.items():
            fig.add_vline(x=dh, line=dict(color='black', dash='dash'))
            fig.add_annotation(x=dh, y=df['Forward Curve'].max() * 1.05, text=label,
                               showarrow=False, xshift=-15, yshift=10)

        # Layout settings
        fig.update_layout(
            title=dict(text=f"Risk Cone for {self.engine.ccy_over}/{self.engine.ccy_under}", x=0.5),
            xaxis_title="Date",
            yaxis_title="Spot",
            legend=dict(yanchor="top", xanchor="center", x=0.5, y=-0.3),
            yaxis_range=[df.min().min() * 0.9, df.max().max() * 1.1]
        )
        return fig


# INITIALIZE AND RUN
pricing_date = business_day_offset(date.today(), -1, roll='forward')
end_date = business_day_offset(pricing_date + relativedelta(years=1), -1, roll='forward')
highlight_dates = {
    '3m': business_day_offset(pricing_date + relativedelta(months=3), -1, roll='forward'),
    '6m': business_day_offset(pricing_date + relativedelta(months=6), -1, roll='forward'),
    '1y': end_date
}

# Instantiate engine and component
engine = RiskConeEngine(pricing_date=pricing_date, end_date=end_date, ccy_under='EUR', ccy_over='USD', freq='W-FRI')
component = RiskConeComponent(engine=engine, highlight_dates=highlight_dates)

# Plot
fig = component.get_visualization()
fig.show()
