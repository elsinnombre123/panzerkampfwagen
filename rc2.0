# ENGINE
import datetime as dt
from enum import Enum
from typing import Union, List, Dict
import pandas as pd
import numpy as np
from abc_quant.datetime.relative_date import RelativeDate
from abc_quant.target.assets import Asset
from abc_quant.timeseries import MqValueError
from abc_quant_analytics.components.data_providers.dataset_provider import DatasetProvider
from abc_quant_analytics.interfaces.analytics_engine_interface import AnalyticsEngine
from abc_quant_analytics.utils.caching.decorators import cached_val
from abc_quant_analytics.utils.date.date_utils import get_date_from_relative_date

class Percentiles(Enum):
    P95 = 0.95
    P05 = 0.05
    P90 = 0.90
    P10 = 0.10

class RiskConeEngine(AnalyticsEngine):
    def __init__(self,
                 cross: Asset,
                 pricing_date: Union[dt.date, RelativeDate] = RelativeDate('-1b'),
                 end_date: Union[dt.date, RelativeDate] = RelativeDate('+1y'),
                 percentiles: List[Percentiles] = (Percentiles.P95, Percentiles.P05, Percentiles.P90, Percentiles.P10),
                 freq: str = 'W-FRI',
                 csa_term: str = 'USD-1',
                 market_data_location: str = 'NYC',
                 precision: int = 4):
        
        super().__init__()
        self.cross = cross
        self.pricing_date = pricing_date
        self.end_date = end_date
        self.percentiles = [p.value for p in percentiles]
        self.freq = freq
        self.csa_term = csa_term
        self.market_data_location = market_data_location
        self.precision = precision
        self.ds = DatasetProvider('FXFORWARD')

    @cached_val
    def process(self) -> pd.DataFrame:
        pricing_date = get_date_from_relative_date(self.pricing_date)
        end_date = get_date_from_relative_date(self.end_date)

        # Query the dataset
        mq_df = self.ds.query(
            bbid=self.cross.name, 
            start=pricing_date, 
            end=end_date, 
            freq=self.freq, 
            location=self.market_data_location
        )
        if mq_df.empty:
            raise MqValueError(f"No data returned for {self.cross.name} in {self.ds.id} dataset")

        # Spot and forward calculations
        mq_df['Forward Curve'] = mq_df['forwardPoints'] + mq_df['spot']
        mq_df['Current Spot'] = mq_df['spot'][0]

        # Process binaries for percentiles
        percentiles_labels = [f"{int(100 * p)}th Percentile" for p in self.percentiles]
        mq_df[percentiles_labels] = mq_df.apply(
            lambda row: [-100 * np.log(row['Forward Curve'] / row['spot']) * p for p in self.percentiles],
            axis=1, result_type='expand'
        )

        mq_df.reset_index(inplace=True)
        mq_df = mq_df[['Date'] + percentiles_labels + ['Forward Curve', 'Current Spot']]
        return mq_df.set_index('Date').round(self.precision)

# COMPONENT
from abc_quant_analytics.dataviz.plotly.plotlyviz import PlotlyViz
from abc_quant_analytics.dataviz.figures.go_line import GoLine
from abc_quant_analytics.interfaces.analytics_component_interface import AnalyticsComponent, MetaDataKeys
from abc_quant_analytics.visualization_params import VisualizationParameters
from abc_quant.timeseries import SecurityMaster, AssetIdentifier
from abc_quant.utils.date.date_utils import get_date_from_relative_date

class RiskConeComponent(AnalyticsComponent):
    def __init__(self, 
                 cross: Asset = None,
                 pricing_date: Union[dt.date, RelativeDate] = RelativeDate('-1b'),
                 end_date: Union[dt.date, RelativeDate] = RelativeDate('+1y'),
                 freq: str = 'W-FRI',
                 highlight_dates: Dict[str, dt.date] = None,
                 percentiles: List[Percentiles] = [Percentiles.P95, Percentiles.P05, Percentiles.P90, Percentiles.P10]):
        
        super().__init__()
        self.cross = cross or self.get_default_params()['cross']
        self.pricing_date = pricing_date
        self.end_date = end_date
        self.freq = freq
        self.highlight_dates = highlight_dates or {}
        self.percentiles = percentiles
        self.engine = RiskConeEngine(
            cross=self.cross,
            pricing_date=self.pricing_date,
            end_date=self.end_date,
            percentiles=self.percentiles,
            freq=self.freq
        )

    def get_visualization(self) -> PlotlyViz:
        df = self.engine.process()
        viz = PlotlyViz(name='Risk Cone Plot')

        # Forward curve line
        line = GoLine(x=df.index, y=df['Forward Curve'], name='Forward Curve', line=dict(color='#00355F', width=2))
        viz.add_trace(line)

        # Plot percentiles with dynamic colors
        colors = ['#FF0000', '#00FF00', '#FFA500', '#00FFFF']
        for i, percentile in enumerate(df.columns[:-2]):  # Excluding 'Forward Curve' and 'Current Spot'
            line = GoLine(x=df.index, y=df[percentile], name=percentile,
                          line=dict(color=colors[i % len(colors)], dash='dash'))
            viz.add_trace(line)

        # Highlight dates with labels
        for label, dh in self.highlight_dates.items():
            viz.add_vline(x=dh, line=dict(color='black', dash='dash'), annotation_text=label, annotation_position="top left")

        # Formatting the layout
        font_settings = dict(family='Arial', size=12)
        viz.update_layout(
            title=dict(text=f"Risk Cone for {self.cross.name}", font=font_settings),
            font=font_settings,
            yaxis_range=[df.min().min() * 0.9, df.max().max() * 1.1]
        )
        return viz

    @staticmethod
    def get_default_params() -> Dict[str, object]:
        return {'cross': SecurityMaster.get_asset('EURUSD', AssetIdentifier.BLOOMBERG_ID)}

    def get_visualization_parameters(self) -> VisualizationParameters:
        return VisualizationParameters(show_legend=True, precision=self.engine.precision)

    @property
    def metadata(self) -> Dict[str, str]:
        pricing_date_str = get_date_from_relative_date(self.pricing_date).strftime('%d%b%Y')
        end_date_str = get_date_from_relative_date(self.end_date).strftime('%d%b%Y')
        title = f"Risk Cone from {pricing_date_str} to {end_date_str} for {self.cross.name}"
        return {MetaDataKeys.Title: title}

# INITIALIZE
from abc_quant.session import AbcSession
AbcSession.use()

highlight_dates = {
    '3m': get_date_from_relative_date(RelativeDate('+3m')).apply_rule(),
    '6m': get_date_from_relative_date(RelativeDate('+6m')).apply_rule(),
    '1y': get_date_from_relative_date(RelativeDate('+1y')).apply_rule()
}

RiskConeComponent(
    cross=SecurityMaster.get_asset('EURUSD', AssetIdentifier.BLOOMBERG_ID),
    pricing_date=RelativeDate('-1b'),
    end_date=RelativeDate('+1y'),
    highlight_dates=highlight_dates,
    percentiles=[Percentiles.P95, Percentiles.P05, Percentiles.P90, Percentiles.P10]
).show()
