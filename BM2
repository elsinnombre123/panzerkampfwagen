import pandas as pd
import datetime as dt
from enum import Enum
from typing import Union, Dict
import plotly.graph_objs as go
from abc_quant_internal.tsdb import TSDB
from abc_quant_analytics.interfaces.analytics_engine_interface import AnalyticsEngine
from abc_quant_analytics.interfaces.analytics_component_interface import AnalyticsComponent, MetaDataKeys
from abc_quant_analytics.visualization_params import VisualizationParameters
from abc_quant_analytics.dataviz.plotly.plotlyviz import PlotlyViz

# Enum Classes for Parameters
class Cross(Enum):
    EURUSD = 'wmeur'
    USDJPY = 'wmjpy'
    GBPUSD = 'wmgbp'

class History(Enum):
    T1Y = '1y'
    T2Y = '2y'
    T3Y = '3y'
    T4Y = '4y'
    T5Y = '5y'
    T10Y = '10y'
    T15Y = '15y'
    T20Y = '20y'
    T25Y = '25y'
    T30Y = '30y'

class Window(Enum):
    T1W = '1w'
    T2W = '2w'
    T1M = '1m'
    T2M = '2m'
    T3M = '3m'

class Direction(Enum):
    UP = 'Up'
    DOWN = 'Down'

# Engine Class
class BigMoves(AnalyticsEngine):
    def __init__(self,
                 cross: Cross = Cross.EURUSD,
                 end_date: Union[dt.date, None] = None,
                 history: Union[History, str] = History.T10Y,
                 num_moves: int = 10,
                 window: Window = Window.T1M,
                 direction: Direction = Direction.UP,
                 precision: int = 4):
        super().__init__()
        self.cross = cross
        self.end_date = end_date
        self.history = History[history] if isinstance(history, str) else history
        self.num_moves = min(num_moves, 20)  # Ensure maximum of 20 moves
        self.window = window
        self.direction = direction
        self.precision = precision

        # Set end_date to the last available date if not provided
        if self.end_date is None:
            self.end_date = self.get_last_available_date()

    def get_last_available_date(self):
        # Fetch spot data with a wide date range to determine the last available date
        data_series = TSDB.get_data(self.cross.value, start=dt.date(2000, 1, 1), end=dt.date.today())
        df = pd.DataFrame(data_series)
        df.index = pd.to_datetime(df.index)
        return df.index.max().date()  # Return the latest date available as a date object

    def get_spot_data(self, cross, start, end):
        # Ensure start and end are of type dt.date
        if isinstance(start, dt.datetime):
            start = start.date()
        if isinstance(end, dt.datetime):
            end = end.date()

        # Fetch spot data from TSDB
        data_series = TSDB.get_data(cross.value, start=start, end=end)
        df = pd.DataFrame(data_series, columns=['spot'])
        df.index = pd.to_datetime(df.index)  # Ensure datetime index
        df.index.name = 'date'
        return df

    def calculate_resampled_returns(self, df, window_size):
        # Calculate rolling returns over the specified window size
        resampled = df['spot'].rolling(window=window_size, min_periods=1).apply(
            lambda x: (x[-1] / x[0] - 1) * 100 if len(x) > 1 else 0, raw=True
        )
        df['rolling_return'] = resampled
        return df

    def find_top_moves(self, df):
        # Rank and select top non-overlapping moves based on specified direction
        df['highlight'] = 0
        sorted_moves = df.sort_values(by='rolling_return', ascending=(self.direction == Direction.DOWN)).dropna(subset=['rolling_return'])
        selected_moves = []
        window_size = self.get_window_size()

        for idx in sorted_moves.index:
            if len(selected_moves) >= self.num_moves:
                break

            # Correct window logic: Highlight preceding 'window_size' trading days
            try:
                window_indices = df.loc[:idx].index[-window_size:]  # Select preceding 'window_size' trading days
            except IndexError:
                continue  # If there aren't enough trading days, skip

            # Check for overlap with existing moves
            overlap = any(any(start <= date <= end for date in window_indices) for start, end, _ in selected_moves)
            if not overlap:
                df.loc[window_indices, 'highlight'] = 1
                selected_moves.append((window_indices[0], window_indices[-1], df.loc[idx, 'rolling_return']))

        return df, selected_moves

    def get_window_size(self):
        # Convert window enum to days
        if self.window == Window.T1W:
            return 5
        elif self.window == Window.T2W:
            return 10
        elif self.window == Window.T1M:
            return 21
        elif self.window == Window.T2M:
            return 42
        elif self.window == Window.T3M:
            return 63
        else:
            raise ValueError("Unsupported window size.")

    def process(self) -> pd.DataFrame:
        # Calculate start date based on history
        years = int(self.history.value[:-1])
        start_date = self.end_date - dt.timedelta(days=years * 365)

        # Fetch spot data
        df = self.get_spot_data(self.cross, start_date, self.end_date)

        # Resample data based on the specified window
        window_size = self.get_window_size()
        df = self.calculate_resampled_returns(df, window_size)

        # Find top moves
        df, _ = self.find_top_moves(df)

        # Return formatted DataFrame
        return df[['spot', 'rolling_return', 'highlight']].round(self.precision)

# Component Class
class BigMovesComponent(AnalyticsComponent):
    def __init__(self,
                 cross: Union[str, None] = None,
                 end_date: Union[str, None] = None,
                 history: Union[str, None] = None,
                 num_moves: int = 10,
                 window: Union[str, None] = None,
                 direction: Union[str, None] = 'Up',
                 precision: int = 4):
        super().__init__()
        # Convert cross to Cross enum if it's a string
        self.cross = Cross[cross] if isinstance(cross, str) else cross or self.get_default_params()['cross']
        self.end_date = end_date
        self.history = History[history] if isinstance(history, str) else history
        self.num_moves = num_moves
        self.window = Window[window] if isinstance(window, str) else window
        self.direction = Direction[direction] if isinstance(direction, str) else direction
        self.precision = precision
        self.engine = BigMoves(cross=self.cross, end_date=self.end_date, history=self.history,
                               num_moves=self.num_moves, window=self.window, direction=self.direction,
                               precision=self.precision)

    def get_visualization(self) -> PlotlyViz:
        df = self.engine.process()
        
        # Spot line color and highlight color (customizable)
        spot_color = 'rgb(0, 123, 255)'  # Example RGB for spot line
        highlight_color = 'rgba(255, 0, 0, 0.3)'  # Example RGBA for highlight
        
        fig = go.Figure()

        # Add spot line
        fig.add_trace(go.Scatter(
            x=df.index,
            y=df['spot'],
            mode='lines',
            name='Spot Price',
            line=dict(color=spot_color)
        ))

        # Add highlighted areas
        highlighted_periods = df[df['highlight'] == 1]
        for start in highlighted_periods.index:
            end = start + pd.Timedelta(days=20)  # Covering 21 trading days if needed (adjust accordingly)
            fig.add_shape(
                type="rect",
                xref="x",
                yref="paper",
                x0=start,
                x1=end,
                y0=0,
                y1=1,
                fillcolor=highlight_color,
                opacity=0.3,
                layer="below",
                line_width=0,
            )

        fig.update_layout(
            title='Spot Price with Highlighted Big Moves',
            xaxis_title='Date',
            yaxis_title='Spot Price',
            showlegend=True,
            plot_bgcolor='white',  # White background
            xaxis=dict(showgrid=False),
            yaxis=dict(showgrid=False)
        )

        return PlotlyViz(fig)

    @staticmethod
    def get_default_params() -> Dict[str, object]:
        return {'cross': Cross.EURUSD}  # Set your default cross

    @staticmethod
    def get_visualization_parameters() -> VisualizationParameters:
        return VisualizationParameters(show_legend=True, precision=2)

    @property
    def metadata(self) -> Dict[str, str]:
        return {MetaDataKeys.Title: f"Big Moves Analysis for {self.cross}"}

# Instantiate and show the component (example usage)
component = BigMovesComponent(
    cross='EURUSD',
    end_date=None,  # Defaults to last available date if None
    history='10y',
    num_moves=10,
    window='1m',
    direction='Up',
    precision=4
)
component.get_visualization().show()
